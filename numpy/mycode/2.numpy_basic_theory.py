==================================================================
Numpy数据类型
==================================================================
bool 			用一位存储的布尔类型（值为TRUE或FALSE）
inti 			由所在平台决定其精度的整数（一般为int32或int64）
int8 			整数，范围为128至127
int16 			整数，范围为32 768至32 767
int32 			整数，范围为231至231 1
int64 			整数，范围为263至263 1
uint8 			无符号整数，范围为0至255
uint16 			无符号整数，范围为0至65 535
uint32 			无符号整数，范围为0至2321
uint64 			无符号整数，范围为0至2641
float16 		半精度浮点数（16位）：其中用1位表示正负号，5位表示指数，10位表示尾数
float32			单精度浮点数（32位）：其中用1位表示正负号，8位表示指数，23位表示尾数
float64或float 		双精度浮点数（64位）：其中用1位表示正负号，11位表示指数，52位表示尾数
complex64 		复数，分别用两个32位浮点数表示实部和虚部
complex128或complex 	复数，分别用两个64位浮点数表示实部和虚部
=================================================================
Numpy数据类型的字符编码
=================================================================
整数 i
无符号整数 u
单精度浮点数 f
双精度浮点数 d
布尔值 b
复数 D
字符串 S
unicode字符串 U
void （空） V
=================================================================
数据类型对象：numpy.dtype
数据类型对象在内存中占用的字节数：numpy.dtype.itemsize
完整的Numpy数据类型列表可以在numpy.sctypeDict.keys()中查找
=================================================================
ravel()函数用于完成展平数组，返回原数组的一个视图view，新数组与原数组共享内存单元
flatten()函数也用于展平数组，请求新内存来保存展平的结果，新数组与原数组不共享内存
reshape()函数用于改变数组的维度,返回新数组，但是不改变原数组
resize()与reshape()一样，用于改变数组维度，但是直接在原数组上更改
=================================================================
数组组合
1. hstack
a = [0, 1, 2], b = [3, 4, 5]
hstack((a, b))水平组合，相当于concatenate((a, b), axis=1), 在第一维上相连
np.hstack((a, b))
[0, 1, 2, 3, 4, 5]
np.concatenate((a, b), axis=1)
m = [[0, 1, 2], [3, 4, 5]]
n = [[6, 7, 8], [9, 10, 11]]
np.hstack((a, b))
[[0, 1, 2, 6, 7, 8],
[3, 4, 5, 9, 10, 11]]

2. vstack
vstack((a, b))垂直组合，相当于concatenate((a, b), axis=0)，在第零维上相连
np.vstack((a, b))
[[0, 1, 2],
 [3, 4, 5]]
np.concatenate((a, b), axis=0)
m = [[0, 1, 2], [3, 4, 5]]
n = [[6, 7, 8], [9, 10, 11]]
np.vstack((a, b))
[[0, 1, 2],
 [3, 4, 5],
 [6, 7, 8],
 [9, 10, 11]]

3. dstack沿着深度方向组合, 相当于将二维数组进行转置，然后vstack
m = [[0, 1, 2], [3, 4, 5]]
n = [[6, 7, 8], [9, 10, 11]]
np.dstack((a, b))
[[[0, 3],
  [1, 4],
  [2, 5]],
 [[6, 9],
  [7, 10],
  [8, 11]]]

np.vstack(([a.T], [b.T]))
[[[0, 3],
  [1, 4],
  [2, 5]],
 [[6, 9],
  [7, 10],
  [8, 11]]]

4. column_stack((a, b))沿着列方向组合，相当于hstack
m = [[0, 1, 2], [3, 4, 5]]
n = [[6, 7, 8], [9, 10, 11]]
np.column_stack((a, b))
[[0, 1, 2, 6, 7, 8],
[3, 4, 5, 9, 10, 11]]

5. row_stack((a, b))沿着行方向组合，相当于vstack
m = [[0, 1, 2], [3, 4, 5]]
n = [[6, 7, 8], [9, 10, 11]]
np.row_stack((a, b))
[[0, 1, 2],
 [3, 4, 5],
 [6, 7, 8],
 [9, 10, 11]]

6. hsplit(a, 3)把数组沿着水平方向分割为3个相同大小的子数组，相当于调用split()函数，并在参数中指定axis=1
a = np.arange(27).reshape(3, 3, 3)
np.hsplit(a, 3)
[array([[[ 0,  1,  2]],

        [[ 9, 10, 11]],

        [[18, 19, 20]]]), array([[[ 3,  4,  5]],

        [[12, 13, 14]],

        [[21, 22, 23]]]), array([[[ 6,  7,  8]],

        [[15, 16, 17]],

        [[24, 25, 26]]])]

7. vsplit(a, 3)把数组沿着垂直方向分割为3个相同大小的子数组，相当于调用split()函数，并在参数中指定axis=0
a = np.arange(27).reshape(3, 3, 3)
np.vsplit(a, 3)
[array([[[0, 1, 2],
         [3, 4, 5],
         [6, 7, 8]]]), array([[[ 9, 10, 11],
         [12, 13, 14],
         [15, 16, 17]]]), array([[[18, 19, 20],
         [21, 22, 23],
         [24, 25, 26]]])]

8. dsplit(a, 3)把数组沿着深度方向分割为3个相同大小的子数组
a = np.arange(27).reshape(3, 3, 3)
np.dsplit(a, 3)
[array([[[ 0],
         [ 3],
         [ 6]],

        [[ 9],
         [12],
         [15]],

        [[18],
         [21],
         [24]]]), array([[[ 1],
         [ 4],
         [ 7]],

        [[10],
         [13],
         [16]],

        [[19],
         [22],
         [25]]]), array([[[ 2],
         [ 5],
         [ 8]],

        [[11],
         [14],
         [17]],

        [[20],
         [23],
         [26]]])]

9. attributes of ndarray
 ndim 数组的维数，或数组轴的个数
 size 数组元素的总个数
 itemsize 数组中元素所占的字节数
 nbytes 整个数组所占的存储空间总数
 T 效果和transpose一样，进行转置

10. 数组转换
 tolist() 将Numpy数组转换成Python列表
 astype() 在转换数组时指定数据类型
